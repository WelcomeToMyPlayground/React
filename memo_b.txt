[소플의 처음 만난 리액트]
---------------------------------------------------------------------------------------

props
: 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트 객체  

- 같은 리액트 컴포넌트에서 눈에 보이는 글자나 색깔 등의 속성을 바꾸고 싶을 때 사용하는 컴포넌트 속 재료
- 컴포넌트에 어떤 데이터를 전달하고 전달된 데이터에 따라 다른 모습의 엘리먼트를 화면에 렌더링하고 싶을 때, 해당 데이터를 props에 넣어 전달


props의 특징

- 읽기 전용 (값을 변경할 수 없음)
- 모든 리액트 컴포넌트는 props를 직접 바꿀 수 없고, 같은 props에 대해서는 항상 같은 결과를 보여줄 것 => (결과) 항상 같은 리액트 엘리먼트를 리턴

-> 리액트 컴포넌트에 입력으로 들어오는 props = 자바스크립트 함수의 파라미터 

---------------------------------------------------------------------------------------

컴포넌트

- 함수 컴포넌트, 클래스 컴포넌트로 나뉨


(1) 함수 컴포넌트

function Welcome(props) {
  return <h1> 안녕, {props.name} </h1>;
}


(2) 클래스 컴포넌트

class Welcome extends React.Component {
  render() {
    return <h1> 안녕, {this.props.name} </h1>;
  }
}


-> 리액트의 모든 클래스 컴포넌트는 React.Component를 상속받아서 만듦
-> 상속 : 객체지향 프로그래밍(OOP)에서 나오는 개념인데, 한 클래스의 변수들과 함수들을 상속받아서 새로운 자식 클래스를 만드는 방법

-> 여기에서는 React.Component 라는 클래스를 상속받아서 Welcome이라는 클래스를 만들었고, 
-> 이는 React.Component를 상속받았기 때문에 결과적으로 리액트 컴포넌트가 되는 것

---------------------------------------------------------------------------------------

컴포넌트 이름 짓기 

- 컴포넌트의 이름은 항상 대문자로 시작!

-> 리액트는 소문자로 시작하는 컴포넌트를 DOM 태그로 인식하기 때문 
   (DOM 태그들은 div, h1, span 등처럼 모두 소문자로 시작함)

-> <div> 나 <span>과 같이 사용하는 것은 내장 컴포넌트라는 것을 뜻하며,
-> 'div'와 'span'과 같은 문자열 형태로 React.createElement()에 전달됨

-> 하지만 <Foo/>와 같이 대문자로 시작하는 경우에는 React.createElement(Foo)의 형태로 컴파일되며
-> 자바스크립트 파일 내에서 사용자가 정의했거나 임포트(import)한 컴포넌트를 가리킴


// HTML div 태그로 인식 (= DOM 태그를 사용한 element)
const element = <div/>;

// Welcome이라는 리액트 컴포넌트로 인식 (= 사용자가 정의한 컴포넌트를 사용한 element)
const element = <Welcome name="예린"/>;

---------------------------------------------------------------------------------------

컴포넌트 렌더링

function Welcome(props) {
  return <h1> 안녕, {props.name} </h1>;
}

const element = <Welcome name="예린"/>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(element);

---------------------------------------------------------------------------------------

컴포넌트 합성 
: 여러 개의 컴포넌트를 합쳐서 하나의 컴포넌트를 만드는 것 

-> 리액트에서는 컴포넌트 안에 또 다른 컴포넌트를 사용할 수 있기 때문에, 복잡한 화면을 여러 개의 컴포넌트로 나눠서 구현할 수 있음



